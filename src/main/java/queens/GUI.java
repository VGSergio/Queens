/* GUI class. The GUI has an options bar, the board, a text with the status
 * of the game or some instructions, and a solutions panel
 */
package queens;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;

/**
 * @author Sergio Vega
 */
public class GUI extends JFrame{
    
    private Board Board;
    private Board[] Solutions;
    private final int[] SPEEDS = {0, 1, 30, 70, 120, 300, 600};     //Change this values to change solving Board speeds, value 0 CAN'T be changed
    private int SIZE = 8;
    private int Speed = SPEEDS[0];                                  //Initial speed
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        initSpeedButtons();
        SolutionsPanel.add(SolutionPicker);
        SizeFrame.setLocationRelativeTo(null);
        
        add(TabbedPane);                //Adds TabbedPane to the frame
        GenerateBoard(SIZE);            //Creates initial board
        ResetBoard(SIZE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabbedPane = new javax.swing.JTabbedPane();
        BoardPanel = new javax.swing.JPanel();
        SolutionsPanel = new javax.swing.JPanel();
        SolutionPicker = new javax.swing.JComboBox<>();
        SizeFrame = new javax.swing.JFrame();
        SizeLabel = new javax.swing.JLabel();
        SizeText = new javax.swing.JTextField();
        SizeButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        ControlMenu = new javax.swing.JMenu();
        SizeOption = new javax.swing.JMenuItem();
        SolveOption = new javax.swing.JMenuItem();
        ResetOption = new javax.swing.JMenuItem();
        ExitOption = new javax.swing.JMenuItem();
        SpeedMenu = new javax.swing.JMenu();
        Speed0 = new javax.swing.JRadioButtonMenuItem();
        Speed1 = new javax.swing.JRadioButtonMenuItem();
        Speed2 = new javax.swing.JRadioButtonMenuItem();
        Speed3 = new javax.swing.JRadioButtonMenuItem();
        Speed4 = new javax.swing.JRadioButtonMenuItem();
        Speed5 = new javax.swing.JRadioButtonMenuItem();
        Speed6 = new javax.swing.JRadioButtonMenuItem();

        TabbedPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TabbedPaneKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout BoardPanelLayout = new javax.swing.GroupLayout(BoardPanel);
        BoardPanel.setLayout(BoardPanelLayout);
        BoardPanelLayout.setHorizontalGroup(
            BoardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        BoardPanelLayout.setVerticalGroup(
            BoardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        TabbedPane.addTab("Board", BoardPanel);

        javax.swing.GroupLayout SolutionsPanelLayout = new javax.swing.GroupLayout(SolutionsPanel);
        SolutionsPanel.setLayout(SolutionsPanelLayout);
        SolutionsPanelLayout.setHorizontalGroup(
            SolutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        SolutionsPanelLayout.setVerticalGroup(
            SolutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        TabbedPane.addTab("Solutions", SolutionsPanel);

        SolutionPicker.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SolutionPickerItemStateChanged(evt);
            }
        });

        SizeFrame.setTitle("Size");
        SizeFrame.setLocation(new java.awt.Point(0, 0));
        SizeFrame.setResizable(false);
        SizeFrame.setSize(new java.awt.Dimension(220, 150));

        SizeLabel.setText("Introduce desired board size");

        SizeButton.setText("OK");
        SizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SizeButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout SizeFrameLayout = new javax.swing.GroupLayout(SizeFrame.getContentPane());
        SizeFrame.getContentPane().setLayout(SizeFrameLayout);
        SizeFrameLayout.setHorizontalGroup(
            SizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SizeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SizeText)
                    .addComponent(SizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SizeFrameLayout.setVerticalGroup(
            SizeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SizeFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SizeButton)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Puzzle2DPentominos");
        setSize(new java.awt.Dimension(1000, 1000));

        MenuBar.setSelectionModel(MenuBar.getSelectionModel());

        ControlMenu.setText("Control");

        SizeOption.setText("Change size");
        SizeOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SizeOptionMouseReleased(evt);
            }
        });
        ControlMenu.add(SizeOption);

        SolveOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SolveOption.setText("Solve");
        SolveOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SolveOptionMouseReleased(evt);
            }
        });
        ControlMenu.add(SolveOption);

        ResetOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        ResetOption.setText("Reset");
        ResetOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ResetOptionMouseReleased(evt);
            }
        });
        ControlMenu.add(ResetOption);

        ExitOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        ExitOption.setText("Exit");
        ExitOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ExitOptionMouseReleased(evt);
            }
        });
        ControlMenu.add(ExitOption);

        MenuBar.add(ControlMenu);

        SpeedMenu.setText("Speed");

        Speed0.setText("Only solutions");
        Speed0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Speed0MouseReleased(evt);
            }
        });
        SpeedMenu.add(Speed0);

        Speed1.setText("Fastest");
        Speed1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Speed1MouseReleased(evt);
            }
        });
        SpeedMenu.add(Speed1);

        Speed2.setText("Faster");
        Speed2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Speed2MouseReleased(evt);
            }
        });
        SpeedMenu.add(Speed2);

        Speed3.setText("Normal");
        Speed3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Speed3MouseReleased(evt);
            }
        });
        SpeedMenu.add(Speed3);

        Speed4.setText("Slow");
        Speed4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Speed4MouseReleased(evt);
            }
        });
        SpeedMenu.add(Speed4);

        Speed5.setText("Slower");
        Speed5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Speed5MouseReleased(evt);
            }
        });
        SpeedMenu.add(Speed5);

        Speed6.setText("Slowest");
        Speed6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Speed6MouseReleased(evt);
            }
        });
        SpeedMenu.add(Speed6);

        MenuBar.add(SpeedMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 549, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitOptionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitOptionMouseReleased
        evt.consume();      //Frees memory 
        System.exit(0);     //Exits the program
    }//GEN-LAST:event_ExitOptionMouseReleased

    private void ResetOptionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetOptionMouseReleased
        evt.consume();                  //Frees memory 
        ResetBoard(SIZE);
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_ResetOptionMouseReleased

    private void SolveOptionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SolveOptionMouseReleased
        evt.consume();
        new Thread(() -> {
            solve();     //Starts solving the puzzle
        }).start();
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_SolveOptionMouseReleased

    private void Speed0MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Speed0MouseReleased
        evt.consume();              //Frees memory
        setSpeed(SPEEDS[0]);        //Sets solving speed
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_Speed0MouseReleased

    private void Speed1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Speed1MouseReleased
        evt.consume();              //Frees memory
        setSpeed(SPEEDS[1]);        //Sets solving speed
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_Speed1MouseReleased

    private void Speed2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Speed2MouseReleased
        evt.consume();              //Frees memory
        setSpeed(SPEEDS[2]);        //Sets solving speed
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_Speed2MouseReleased

    private void Speed3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Speed3MouseReleased
        evt.consume();              //Frees memory
        setSpeed(SPEEDS[3]);        //Sets solving speed
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_Speed3MouseReleased

    private void Speed4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Speed4MouseReleased
        evt.consume();              //Frees memory
        setSpeed(SPEEDS[4]);        //Sets solving speed
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_Speed4MouseReleased

    private void Speed5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Speed5MouseReleased
        evt.consume();              //Frees memory
        setSpeed(SPEEDS[5]);        //Sets solving speed
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_Speed5MouseReleased

    private void Speed6MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Speed6MouseReleased
        evt.consume();              //Frees memory
        setSpeed(SPEEDS[6]);        //Sets solving speed
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_Speed6MouseReleased

    private void TabbedPaneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TabbedPaneKeyReleased
        int key = evt.getKeyCode();
        if (evt.isControlDown() && (key == KeyEvent.VK_E)){         //Ctrl+E
            evt.consume();      //Frees memory
            System.exit(0);     //Exits the program
        }
        else if (evt.isControlDown() && (key == KeyEvent.VK_R)){    //Ctrl+R
            evt.consume();                      //Frees memory
            ResetBoard(SIZE);
        }
        else if (evt.isControlDown() && (key == KeyEvent.VK_S)){    //Ctrl+S
            evt.consume();      //Frees memory
            new Thread(() -> {
                solve();        //Starts solving the puzzle
            }).start();
        }
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_TabbedPaneKeyReleased

    private void SolutionPickerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SolutionPickerItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED){                    //A solution has been selected
            showSolution(Solutions[SolutionPicker.getSelectedIndex()]);     //Shows the selected solution
        }
        TabbedPane.requestFocus();      //Returns focus to the keyevent listener component
    }//GEN-LAST:event_SolutionPickerItemStateChanged

    private void SizeOptionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SizeOptionMouseReleased
        SizeFrame.setVisible(true);
        SizeText.setEnabled(true);
        SizeText.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();                   //Obtenemos la tecla pulsada
                if (c<'0' || c>'9'){
                    ke.consume();                           //Si no es un numero lo desecha, ademas libera memoria  
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
                int key = ke.getKeyCode();
                ke.consume();
                if (key == KeyEvent.VK_ENTER){              
                    ChangeBoardSize();
                }
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        evt.consume();
    }//GEN-LAST:event_SizeOptionMouseReleased

    private void SizeButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SizeButtonMouseReleased
        evt.consume();
        ChangeBoardSize();
    }//GEN-LAST:event_SizeButtonMouseReleased

    /**
     * Creates a new empty board
     */
    private void GenerateBoard(int size){
        if (Board!=null){                   //A board already exists
            BoardPanel.remove(Board);       //Deletes previous board
        }   
        
        //Board configuration
        Board = new Board(size);                //Creates a new board
        BoardPanel.add(Board);                  //Adds the new board
        SIZE = size;                            //Updates rows, columns
        Board.setSpeed(Speed);                  //Sets solving speed
        
        //Solution picker configuration
        SolutionPicker.setSize(150, 30);            //SolutionPicker size
        SolutionPicker.setLocation((Board.getWidth()- SolutionPicker.getWidth())/2, 30);   //SolutionPicker location
        
        //BoardPanel and SolutionPanel configuration
        int width = Board.getWidth();                               //New panel width
        int height = Board.getHeight()+ getInsets().top;            //New panel height
        BoardPanel.setSize(width, height);                          //BoardPanel new size
        SolutionsPanel.setSize(width, height);                      //SolutionPanel new size
        
        //TabbedPane configuration
        height += TabbedPane.getBoundsAt(0).height;     //TabbedPane new height
        TabbedPane.setSize(width, height);              //TabbedPane new size
        
        //Frame configuration
        width += getInsets().left + getInsets().right;
        height += 2*getInsets().bottom + MenuBar.getBounds().height;    //Frame new height
        setSize(width, height);                 //Sets frame's new size
        setLocationRelativeTo(null);            //Centers frame 
        setResizable(false);                    //Frame NOT resizable by the user
    }
    
    private void ChangeBoardSize(){
        SizeFrame.setVisible(false);
        String s = SizeText.getText();
        SizeText.setText("");
        if (!s.isEmpty()){
            SIZE = Integer.valueOf(s);
            GenerateBoard(SIZE);
        }
    }
    
    /**
     * Initializes speed radio buttons
     */
    private void initSpeedButtons(){
        ButtonGroup g = new ButtonGroup();                          //We add all the radiobuttons 
        for(int i=0; i<SpeedMenu.getMenuComponentCount(); i++){     //to the same group so only 
            g.add(SpeedMenu.getItem(i));                            //one can be selected at a time
        }
        Speed0.setSelected(true);       //Default speed -> Normal speed
    }
    
    /**
     * Updates solutions picker combobox with the solutions found
     */
    private void updateSolutions(){
        if(Solutions.length>0){
            for(int i=0; i<Solutions.length; i++){
                SolutionPicker.addItem("Solution " + i);
            }
        }
    }
    
    /**
     * Clears solutions picker combobox and erases solutions boards
     */
    private void resetSolutions(){
        Component[] aux = SolutionsPanel.getComponents();
        for (Component cmpnt : aux) {
            if(cmpnt instanceof queens.Board) {
                SolutionsPanel.remove(cmpnt);
            }
        }
        SolutionPicker.removeAllItems();
    }
    
    /**
     * Shows the desired solution
     * @param board 
     */
    private void showSolution(Board board){
        Component[] aux = SolutionsPanel.getComponents();       //Gets all the componenets
        for (Component cmpnt : aux) {                           //on the solution panel
            if(cmpnt instanceof queens.Board){                   //if there was another 
                SolutionsPanel.remove(cmpnt);                   //solution being shown
            }                                                   //its deleted
        }

        board.setBounds(0, 0, getWidth(), board.getHeight());                           //Places the solution
        SolutionsPanel.add(board);                                                      //adds it to the solution panel
        repaint();                      //Repaints frame
    }
    
    /**
     * Stops board solving, resets status message and solutions panel, 
     * and creates a new Board.
     * @param row
     * @param column 
     */
    private void ResetBoard(int size){
        Board.setSolving(false);            //Stops BackTracking solver method in case it was stooped during execution
        
        resetSolutions();                   //Erases previous solutions found
        GenerateBoard(size);                //New (rowXcolumn) board
    }
        
    /**
     * Sets the speed at which the board will be solved
     * @param miliseconds 
     */
    private void setSpeed(int miliseconds){
        Speed = miliseconds;
        Board.setSpeed(miliseconds);
    }
    
    /**
     * 
     */
    private void solve(){
        if(!Board.isSolving()){
            Board.setSolving(true);
            long start = System.currentTimeMillis();
            Solutions = Board.Solve(this, 0, 0, 0);
            long finish = System.currentTimeMillis();
            System.out.println("Solved in "+(finish-start)+" MiliSeconds\n");
            updateSolutions();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUI().setVisible(true);     //Inicia el puzzle
        });
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JPanel BoardPanel;
    private static javax.swing.JMenu ControlMenu;
    private static javax.swing.JMenuItem ExitOption;
    private static javax.swing.JMenuBar MenuBar;
    private static javax.swing.JMenuItem ResetOption;
    private static javax.swing.JButton SizeButton;
    private static javax.swing.JFrame SizeFrame;
    private static javax.swing.JLabel SizeLabel;
    private static javax.swing.JMenuItem SizeOption;
    private static javax.swing.JTextField SizeText;
    private static javax.swing.JComboBox<String> SolutionPicker;
    private static javax.swing.JPanel SolutionsPanel;
    private static javax.swing.JMenuItem SolveOption;
    private static javax.swing.JRadioButtonMenuItem Speed0;
    private static javax.swing.JRadioButtonMenuItem Speed1;
    private static javax.swing.JRadioButtonMenuItem Speed2;
    private static javax.swing.JRadioButtonMenuItem Speed3;
    private static javax.swing.JRadioButtonMenuItem Speed4;
    private static javax.swing.JRadioButtonMenuItem Speed5;
    private static javax.swing.JRadioButtonMenuItem Speed6;
    private static javax.swing.JMenu SpeedMenu;
    private static javax.swing.JTabbedPane TabbedPane;
    // End of variables declaration//GEN-END:variables

}
